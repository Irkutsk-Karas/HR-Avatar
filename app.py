# app.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json
import base64
import sys
import os
import time
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ services
from services import ResumeParser, InterviewAgent, InterviewAnalyzer, VoiceService
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="HR Avatar ü§ñ",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3, h4, h5, h6 {
        font-family: 'Comic Sans MS', cursive, sans-serif;
        color: #2E86AB;
    }

    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton>button {
        font-family: 'Verdana', sans-serif;
        border-radius: 20px;
        border: 2px solid #2E86AB;
        background: linear-gradient(45deg, #2E86AB, #A23B72);
        color: white;
        transition: all 0.3s ease;
    }

    .stButton>button:hover {
        transform: scale(1.05);
        box-shadow: 0 5px 15px rgba(46, 134, 171, 0.4);
    }

    /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
    .user-message {
        background: linear-gradient(135deg, #E8F4F8, #D1E8F2);
        padding: 15px;
        border-radius: 20px;
        margin: 10px 0;
        border-left: 5px solid #2E86AB;
        font-family: 'Verdana', sans-serif;
    }

    .assistant-message {
        background: linear-gradient(135deg, #F8E8F4, #F2D1E8);
        padding: 15px;
        border-radius: 20px;
        margin: 10px 0;
        border-left: 5px solid #A23B72;
        font-family: 'Verdana', sans-serif;
    }

    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */
    .progress-container {
        background: #F0F0F0;
        border-radius: 10px;
        padding: 10px;
        margin: 10px 0;
    }

    .progress-bar {
        height: 20px;
        background: linear-gradient(45deg, #2E86AB, #A23B72);
        border-radius: 10px;
        transition: width 0.3s ease;
    }

    /* –¢–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ */
    .plotly-graph-div {
        font-family: 'Verdana', sans-serif !important;
    }
</style>
""", unsafe_allow_html=True)


class AppUtils:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã"""

    @staticmethod
    def ensure_directory_exists(path):
        os.makedirs(path, exist_ok=True)
        return path

    @staticmethod
    def save_uploaded_file(uploaded_file, save_dir="data"):
        AppUtils.ensure_directory_exists(save_dir)
        file_path = os.path.join(save_dir, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        return file_path

    @staticmethod
    def create_skills_chart(skills_list):
        if not skills_list:
            return None

        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –Ω–∞–≤—ã–∫–æ–≤
        top_skills = skills_list[:10]

        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º —Ü–≤–µ—Ç–æ–≤
        skills_df = pd.DataFrame({
            '–ù–∞–≤—ã–∫': top_skills,
            '–£—Ä–æ–≤–µ–Ω—å': range(len(top_skills), 0, -1)  # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        })

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
        fig = px.bar(skills_df,
                     x='–£—Ä–æ–≤–µ–Ω—å',
                     y='–ù–∞–≤—ã–∫',
                     orientation='h',
                     title="üèÜ –¢–æ–ø-10 –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ",
                     color='–£—Ä–æ–≤–µ–Ω—å',
                     color_continuous_scale='Blues')

        # –†—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Plotly
        fig['layout'].update(
            font=dict(family='Verdana', size=12),
            xaxis=dict(title="", showticklabels=False),
            yaxis=dict(title="–ù–∞–≤—ã–∫–∏"),
            showlegend=False,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
        )

        return fig

    @staticmethod
    def create_score_gauge(score, title="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞"):
        fig = go.Figure(go.Indicator(
            mode="gauge+number+delta",
            value=score,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': title},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 50], 'color': "lightgray"},
                    {'range': [50, 80], 'color': "gray"},
                    {'range': [80, 100], 'color': "lightgreen"}
                ]
            }
        ))
        return fig


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def init_session_state():
    # –≠—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    if 'current_step' not in st.session_state:
        st.session_state.current_step = 1

    # –î–∞–Ω–Ω—ã–µ
    if 'resume_analysis' not in st.session_state:
        st.session_state.resume_analysis = None
    if 'conversation' not in st.session_state:
        st.session_state.conversation = []
    if 'interview_results' not in st.session_state:
        st.session_state.interview_results = None
    if 'agent' not in st.session_state:
        st.session_state.agent = None

    # –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
    if 'is_recording' not in st.session_state:
        st.session_state.is_recording = False
    if 'last_voice_text' not in st.session_state:
        st.session_state.last_voice_text = ""
    if 'voice_status' not in st.session_state:
        st.session_state.voice_status = ""
    if 'recording_start_time' not in st.session_state:
        st.session_state.recording_start_time = 0
    if 'processing_audio' not in st.session_state:
        st.session_state.processing_audio = False
    if 'recognition_quality' not in st.session_state:
        st.session_state.recognition_quality = ""


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_session_state()
    utils = AppUtils()

    st.title("ü§ñ HR Avatar - AI —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π")
    st.markdown("---")

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —ç—Ç–∞–ø–æ–≤
    col1, col2, col3 = st.columns(3)
    with col1:
        step1_class = "active-tab" if st.session_state.current_step >= 1 else "disabled-tab"
        st.markdown(f'<div class="{step1_class}">üìä 1. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ</div>', unsafe_allow_html=True)
    with col2:
        step2_class = "active-tab" if st.session_state.current_step >= 2 else "disabled-tab"
        st.markdown(f'<div class="{step2_class}">üé§ 2. –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</div>', unsafe_allow_html=True)
    with col3:
        step3_class = "active-tab" if st.session_state.current_step >= 3 else "disabled-tab"
        st.markdown(f'<div class="{step3_class}">üìà 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</div>', unsafe_allow_html=True)

    st.markdown("---")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        vacancy_options = {
            "Python –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["Python", "Django", "PostgreSQL", "Docker", "Git"],
            "Data Scientist": ["Python", "ML", "Pandas", "SQL", "Statistics"],
            "DevOps Engineer": ["Docker", "Kubernetes", "AWS", "Linux", "CI/CD"]
        }

        selected_vacancy = st.selectbox(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:",
            list(vacancy_options.keys()),
            key="vacancy_select"
        )

        interview_mode = st.radio(
            "üé§ –†–µ–∂–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
            ["–¢–µ–∫—Å—Ç–æ–≤—ã–π", "–ì–æ–ª–æ—Å–æ–≤–æ–π"],
            key="interview_mode"
        )

        uploaded_file = st.file_uploader(
            "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX):",
            type=["pdf", "docx"],
            key="resume_uploader"
        )

        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", key="restart_button"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            init_session_state()
            st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    if st.session_state.current_step == 1:
        show_resume_analysis(uploaded_file, vacancy_options, selected_vacancy, utils)
    elif st.session_state.current_step == 2:
        show_interview_interface(selected_vacancy, vacancy_options, interview_mode, utils)
    elif st.session_state.current_step == 3:
        show_results(utils)


def show_resume_analysis(uploaded_file, vacancy_options, selected_vacancy, utils):
    st.header("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ")

    if uploaded_file is None:
        st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        return

    with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ..."):
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
            file_path = utils.save_uploaded_file(uploaded_file)
            parser = ResumeParser()
            resume_text = parser.extract_text(file_path)
            analysis = parser.parse_resume(resume_text, vacancy_options[selected_vacancy])

            st.session_state.resume_analysis = analysis

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", f"{analysis['match_score']}%")
            with col2:
                status = "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç" if analysis['match_score'] > 50 else "‚ö†Ô∏è –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"
                st.metric("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", status)
            with col3:
                st.metric("–ù–∞–≤—ã–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ", len(analysis['skills']))

            # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–≤—ã–∫–æ–≤
            if analysis['skills']:
                fig = utils.create_skills_chart(analysis['skills'])
                st.plotly_chart(fig, use_container_width=True)

            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
            if st.button("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é", type="primary"):
                st.session_state.current_step = 2
                st.rerun()

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


def show_interview_interface(vacancy_name, vacancy_options, interview_mode, utils):
    st.header("üé§ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")

    if st.session_state.resume_analysis is None:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—é–º–µ")
        return

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    MAX_QUESTIONS = 8
    current_questions = len([msg for msg in st.session_state.conversation if msg[0] == "assistant"])

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    st.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_questions}/{MAX_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤")

    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress_percent = min(current_questions / MAX_QUESTIONS * 100, 100)
    progress_html = f"""
    <div class="progress-container">
        <div class="progress-bar" style="width: {progress_percent}%"></div>
    </div>
    """
    st.markdown(progress_html, unsafe_allow_html=True)

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    if current_questions == 0:
        st.success(f"üí° –í–∞–º –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ {MAX_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ!")
    elif current_questions < MAX_QUESTIONS:
        st.info(f"üí° –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {MAX_QUESTIONS - current_questions}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    if st.session_state.agent is None:
        st.session_state.agent = InterviewAgent(vacancy_name, vacancy_options[vacancy_name])
        st.session_state.agent.start_interview()
        welcome_msg = st.session_state.agent.conversation_history[-1]["content"]
        st.session_state.conversation.append(("assistant", welcome_msg))
        current_questions += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    st.subheader("üí¨ –î–∏–∞–ª–æ–≥")
    for i, (role, message) in enumerate(st.session_state.conversation):
        if role == "assistant":
            st.markdown(f'<div class="assistant-message"><b>ü§ñ HR-–∞–≤–∞—Ç–∞—Ä:</b> {message}</div>',
                        unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="user-message"><b>üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {message}</div>',
                        unsafe_allow_html=True)

    # –°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    if st.session_state.voice_status:
        st.info(st.session_state.voice_status)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    st.subheader("üìù –í–∞—à –æ—Ç–≤–µ—Ç")

    if current_questions >= MAX_QUESTIONS:
        st.success("üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!")
        if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
                     type="primary"):
            st.session_state.current_step = 3
            st.rerun()
        return

    if interview_mode == "–¢–µ–∫—Å—Ç–æ–≤—ã–π":
        user_input = st.text_area("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                                  height=100,
                                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å...")

        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary") and user_input:
            success = process_user_input(user_input)
            if success:
                st.rerun()
            else:
                st.warning("üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'")
    else:
        col1, col2 = st.columns([3, 1])
        with col1:
            user_input = st.text_area("‚úçÔ∏è –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é:",
                                      height=100,
                                      placeholder="–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å...")
        with col2:
            if st.button("üé§ –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞", type="secondary",
                         disabled=st.session_state.is_recording):
                st.session_state.is_recording = True
                st.session_state.voice_status = "‚è∫Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å!"
                st.session_state.recording_start_time = time.time()
                st.rerun()

        if user_input and st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary"):
            success = process_user_input(user_input)
            if success:
                st.rerun()
            else:
                st.warning("üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    if st.session_state.is_recording:
        with st.spinner("üé§ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å"):
            voice_service = VoiceService()
            voice_text = voice_service.speech_to_text(timeout=15)

            st.session_state.is_recording = False
            if voice_text:
                st.session_state.last_voice_text = voice_text
                st.session_state.voice_status = "‚úÖ –ó–∞–ø–∏—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!"
                st.rerun()
            else:
                st.session_state.voice_status = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
                st.rerun()

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    if st.session_state.last_voice_text:
        st.success(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å: **{st.session_state.last_voice_text}**")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç", type="primary"):
                success = process_user_input(st.session_state.last_voice_text)
                st.session_state.last_voice_text = ""
                st.session_state.voice_status = ""
                if success:
                    st.rerun()
                else:
                    st.warning("üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'")
        with col2:
            if st.button("üîÑ –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="secondary"):
                st.session_state.last_voice_text = ""
                st.session_state.voice_status = ""
                st.rerun()

    # –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    if interview_mode == "–ì–æ–ª–æ—Å–æ–≤–æ–π":
        with st.expander("üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:"):
            st.markdown("""
            - üé§ **–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ**
            - üîá **–£–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤—ã–π —à—É–º**
            - üìè **–î–µ—Ä–∂–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10-15 —Å–º –æ—Ç–æ —Ä—Ç–∞**
            - üó£Ô∏è **–ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏**
            - ‚è±Ô∏è **–î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏**
            - üîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ**
            """)

    # –ö–Ω–æ–ø–∫–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if current_questions > 0 and current_questions < MAX_QUESTIONS:
        if st.button("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", type="secondary"):
            st.session_state.current_step = 3
            st.rerun()


def process_user_input(user_input):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    MAX_QUESTIONS = 8
    current_questions = len([msg for msg in st.session_state.conversation if msg[0] == "assistant"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if current_questions >= MAX_QUESTIONS:
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.conversation.append(("user", user_input))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–º
    agent = st.session_state.agent
    if agent.process_answer(user_input):
        last_msg = agent.conversation_history[-1]
        if last_msg["role"] == "assistant":
            st.session_state.conversation.append(("assistant", last_msg["content"]))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç–∞
            new_question_count = len([msg for msg in st.session_state.conversation if msg[0] == "assistant"])
            return new_question_count < MAX_QUESTIONS

    return True


def show_results(utils):
    st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")

    if not st.session_state.conversation:
        st.info("‚ÑπÔ∏è –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return

    if st.session_state.interview_results is None and st.session_state.agent:
        with st.spinner("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è..."):
            try:
                agent = st.session_state.agent
                analyzer = InterviewAnalyzer()
                results = analyzer.analyze_interview(
                    agent.conversation_history,
                    agent.required_skills,
                    agent.vacancy_name
                )
                st.session_state.interview_results = results
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
                return

    results = st.session_state.interview_results
    if not results:
        return

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.success("üéâ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

    col1, col2 = st.columns(2)

    with col1:
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        fig = utils.create_score_gauge(results['overall_score'])
        st.plotly_chart(fig, use_container_width=True)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        recommendation = results.get('recommendation', 'additional_interview')
        if recommendation == 'hire':
            st.success(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: **–ù–∞–Ω—è—Ç—å**")
        elif recommendation == 'reject':
            st.error(f"‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: **–û—Ç–∫–∞–∑–∞—Ç—å**")
        else:
            st.warning(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ**")

    with col2:
        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if results.get('strengths'):
            st.subheader("‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:")
            for i, strength in enumerate(results['strengths'][:5], 1):
                st.markdown(f"{i}. {strength}")

        # –û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
        if results.get('weaknesses'):
            st.subheader("üìà –û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è:")
            for i, weakness in enumerate(results['weaknesses'][:5], 1):
                st.markdown(f"{i}. {weakness}")

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    st.subheader("üí¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    if results.get('feedback'):
        st.info(results['feedback'])
    else:
        st.info("–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–∫–∞–∑–∞–ª —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –Ω–∞–π–º—É.")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", len([m for m in st.session_state.conversation if m[0] == "assistant"]))
    with col2:
        st.metric("–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤", len([m for m in st.session_state.conversation if m[0] == "user"]))
    with col3:
        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"~{len(st.session_state.conversation) * 2} –º–∏–Ω")

    # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    if st.button("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", type="primary"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        init_session_state()
        st.rerun()


if __name__ == "__main__":
    main()