# main.py
import os
import json
from services import ResumeParser, InterviewAgent, InterviewAnalyzer, VoiceService
from config import Config
from dotenv import load_dotenv
import speech_recognition as sr

load_dotenv()


def check_microphone():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    try:
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            print("üîä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞... –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å")
            recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = recognizer.listen(source, timeout=3, phrase_time_limit=2)
        print("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º: {e}")
        return False


def check_internet():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"""
    try:
        import requests
        requests.get("https://www.google.com", timeout=5)
        return True
    except:
        return False


def conduct_interview(agent, voice_service=None):
    """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    print(f"\nüéØ –ù–∞—á–∞–ª–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è ({'–≥–æ–ª–æ—Å–æ–≤–æ–π' if voice_service else '—Ç–µ–∫—Å—Ç–æ–≤—ã–π'} —Ä–µ–∂–∏–º)...")
    print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–∂–∏—Ç–µ '–∑–∞–≤–µ—Ä—à–∏—Ç—å' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'exit'")
    print("-" * 50)

    agent.start_interview()
    question_count = 0
    max_questions = 10

    while question_count < max_questions:
        try:
            if voice_service:
                print("\nüé§ –ì–æ–≤–æ—Ä–∏—Ç–µ...")
                answer = voice_service.speech_to_text()
                if not answer:
                    continue
            else:
                answer = input("\nüë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: ")

            if not answer.strip():
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            stop_commands = ['–∑–∞–≤–µ—Ä—à–∏—Ç—å', '–∑–∞–∫–æ–Ω—á–∏—Ç—å', '–≤—ã—Ö–æ–¥', '—Å—Ç–æ–ø', 'exit', 'quit']
            if answer.lower() in stop_commands:
                print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...")
                break

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if not agent.process_answer(answer):
                break

            question_count += 1

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
            if question_count >= max_questions:
                print("\n‚úì –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                break

        except KeyboardInterrupt:
            print("\n\n–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            continue

    return agent.end_interview()


def main():
    print("=== HR-–ê–≤–∞—Ç–∞—Ä - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è ===")
    print("=" * 60)

    config = Config()

    # 1. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ
    print("\n1. üìÑ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...")
    parser = ResumeParser()

    resume_text = parser.extract_text(config.RESUME_PATH)
    if not resume_text:
        print("‚ùå –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ç–µ–∫—Å—Ç.")
        resume_text = """
        Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 3 –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞. 
        –ù–∞–≤—ã–∫–∏: Python, Django, Flask, PostgreSQL, Docker, Git, Linux.
        –û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, REST API, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ.
        """

    vacancy = {
        "name": "Python –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "required_skills": ["Python", "Django", "PostgreSQL", "Docker", "Git", "Linux"]
    }

    analysis = parser.parse_resume(resume_text, vacancy["required_skills"])

    print(f"‚úÖ –ù–∞–≤—ã–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {', '.join(analysis['skills'][:8])}")
    print(f"üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {analysis['match_score']}%")
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['recommendation']}")

    # –†–µ—à–µ–Ω–∏–µ –æ –¥–æ–ø—É—Å–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
    if analysis['match_score'] < 30:
        print(f"\n‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        return

    # 2. –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    print(f"\n2. üéõÔ∏è  –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")
    print("1. –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)")
    print("2. –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º (–º–∏–∫—Ä–æ—Ñ–æ–Ω)")

    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

    voice_service = None
    if choice == "2":
        if not check_microphone():
            print("‚ö†Ô∏è  –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
            choice = "1"
        else:
            voice_service = VoiceService()

    # 3. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    agent = InterviewAgent(vacancy["name"], vacancy["required_skills"])
    conversation = conduct_interview(agent, voice_service)

    # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n4. üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...")
    analyzer = InterviewAnalyzer()
    results = analyzer.analyze_interview(
        conversation,
        vacancy["required_skills"],
        vacancy["name"]
    )

    print("\n" + "=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"üèÜ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {results['overall_score']}/100")
    print(f"‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {', '.join(results['strengths'])}")
    print(f"üìà –û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è: {', '.join(results['weaknesses'])}")
    print(f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {results['recommendation']}")
    print(f"\nüí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {results['feedback']}")

    # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_file = "interview_results.json"
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")

    # 6. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if voice_service:
        feedback_summary = f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ {results['overall_score']} –∏–∑ 100. {results['feedback']}"
        voice_service.text_to_speech(feedback_summary)


if __name__ == "__main__":
    main()