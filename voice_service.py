# services/voice_service.py
import speech_recognition as sr
import pyttsx3
import time
from config import Config
import os
import json
import threading
from datetime import datetime

# Vosk –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
try:
    from vosk import Model, KaldiRecognizer
    import pyaudio

    VOSK_AVAILABLE = True
except ImportError:
    VOSK_AVAILABLE = False


class VoiceService:
    def __init__(self):
        self.config = Config()
        self.tts_engine = None
        self.vosk_model = None
        self.audio = None
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognizer.energy_threshold = 300
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 0.8

        self._setup_voice()
        self._setup_vosk()

    def _setup_vosk(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vosk –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if VOSK_AVAILABLE and os.path.exists(self.config.VOSK_MODEL_PATH):
            try:
                self.vosk_model = Model(self.config.VOSK_MODEL_PATH)
                self.audio = pyaudio.PyAudio()
                print("‚úÖ Vosk –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Vosk –º–æ–¥–µ–ª–∏: {e}")

    def _setup_voice(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞"""
        try:
            self.tts_engine = pyttsx3.init()
            voices = self.tts_engine.getProperty('voices')

            # –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
            russian_voices = [v for v in voices if 'russian' in v.name.lower() or 'ru' in v.id.lower()]
            if russian_voices:
                self.tts_engine.setProperty('voice', russian_voices[0].id)

            self.tts_engine.setProperty('rate', 150)
            self.tts_engine.setProperty('volume', 0.9)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
            self.tts_engine = None

    def text_to_speech(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        print(f"üó£Ô∏è  HR-–∞–≤–∞—Ç–∞—Ä: {text}")

        if not self.tts_engine:
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
            engine = pyttsx3.init()
            engine.say(text)
            engine.runAndWait()
            engine.stop()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")

    def speech_to_text_vosk(self, timeout=15):
        """–û—Ñ—Ñ–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk —Å pyaudio"""
        if not self.vosk_model or not self.audio:
            return None

        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            stream = self.audio.open(
                format=pyaudio.paInt16,
                channels=1,
                rate=16000,
                input=True,
                frames_per_buffer=4096,
                input_device_index=None
            )

            recognizer = KaldiRecognizer(self.vosk_model, 16000)

            print(f"üé§ –°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å ({timeout} —Å–µ–∫—É–Ω–¥)")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            start_time = time.time()
            audio_data = b""

            while time.time() - start_time < timeout:
                try:
                    data = stream.read(4096, exception_on_overflow=False)
                    audio_data += data

                    if recognizer.AcceptWaveform(data):
                        result = json.loads(recognizer.Result())
                        text = result.get('text', '').strip()
                        if text and len(text) > 3:
                            stream.stop_stream()
                            stream.close()
                            return text

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                    continue

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                result = json.loads(recognizer.Result())
                text = result.get('text', '').strip()
                if text and len(text) > 3:
                    return text

                # –ü—Ä–æ–±—É–µ–º partial result
                partial_result = json.loads(recognizer.PartialResult())
                partial_text = partial_result.get('partial', '').strip()
                if partial_text and len(partial_text) > 3:
                    return partial_text

            except:
                pass

            stream.stop_stream()
            stream.close()

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Vosk —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None

    def speech_to_text_google(self, timeout=15):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google Speech Recognition —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            with self.microphone as source:
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
                print("üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
                self.recognizer.adjust_for_ambient_noise(source, duration=2)

                print(f"üé§ –°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å ({timeout} —Å–µ–∫—É–Ω–¥)")

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏ –ø–∞—É–∑—ã
                audio = self.recognizer.listen(
                    source,
                    timeout=timeout,
                    phrase_time_limit=timeout
                )

            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            return text

        except sr.UnknownValueError:
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return None
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Google: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return None

    def speech_to_text(self, timeout=15):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        print(f"üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout} —Å–µ–∫—É–Ω–¥")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Vosk
        if VOSK_AVAILABLE and self.vosk_model:
            text = self.speech_to_text_vosk(timeout)
            if text:
                print(f"‚úÖ Vosk —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                return text
            else:
                print("‚ö†Ô∏è Vosk –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–µ—á—å, –ø—Ä–æ–±—É–µ–º Google...")

        # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º Google
        text = self.speech_to_text_google(timeout)
        if text:
            print(f"‚úÖ Google —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            return text

        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        return None

    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.audio:
            self.audio.terminate()